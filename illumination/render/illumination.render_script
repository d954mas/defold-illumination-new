local ILLUMINATION = require "illumination.illumination"

function init(self)
	self.scene = {
		predicate = render.predicate({ 'model' }),
		view = vmath.matrix4(),
		projection = vmath.matrix4()
	}

	self.gui = {
		predicate = render.predicate({ 'gui' }),
		view = vmath.matrix4()
	}

	self.text = {
		predicate = render.predicate({ 'text' })
	}



	self.draw_opts = {
		constants = render.constant_buffer(),
		frustum = nil,
		frustum_planes = render.FRUSTUM_PLANES_ALL
	}

	ILLUMINATION:set_render(self)
	ILLUMINATION:on_resize(render.get_window_width(), render.get_window_height())
	ILLUMINATION:add_constants(self.draw_opts.constants)

	self.clear_options = {
		[render.BUFFER_COLOR_BIT] = ILLUMINATION.fog_color,
		[render.BUFFER_DEPTH_BIT] = 1,
		[render.BUFFER_STENCIL_BIT] = 0
	}


end

function update(self)
	local width = render.get_window_width()
	local height = render.get_window_height()
	--print("w:" .. width .. "h:" .. height)

	ILLUMINATION:set_view(self.scene.view)
	ILLUMINATION:set_frustum(self.scene.projection*self.scene.view)
	ILLUMINATION:set_camera(self.scene.view.m03,self.scene.view.m13,self.scene.view.m23)

	illumination.lights_set_view(self.scene.view)
	illumination.lights_set_frustum(self.scene.projection*self.scene.view)
	local time = chronos.nanotime()
	illumination.lights_update()
	print("update lights:" .. chronos.nanotime()-time)


	ILLUMINATION:render_shadows()

	render.set_viewport(0, 0, width, height)
	render.clear(self.clear_options)




	render.set_viewport(0, 0, width, height)




	ILLUMINATION:draw_begin()
	-- scene
	render.set_view(self.scene.view)
	render.set_projection(self.scene.projection)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.enable_state(render.STATE_BLEND)
	render.enable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_DEPTH_TEST)
	render.set_depth_mask(true)
	render.draw(self.scene.predicate, self.draw_opts)
	ILLUMINATION:draw_finish()

	ILLUMINATION:draw_debug()


	-- debug
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.draw_debug3d()

	-- gui
	render.set_view(self.gui.view)
	render.set_projection(vmath.matrix4_orthographic(0, width, 0, height, -1, 1))
	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui.predicate)
	render.draw(self.text.predicate)

--	ILLUMINATION:draw_debug_planes()
	ILLUMINATION:draw_shadow_debug()
	ILLUMINATION:draw_data_lights_debug()
end

function on_message(self, message_id, message)
	if message_id == hash 'clear_color' then
		self.clear_color = message.color
	elseif message_id == hash 'set_view_projection' then
		self.scene.view = message.view
		self.scene.projection = message.projection
	elseif message_id == hash 'window_resized' then
		ILLUMINATION:on_resize(render.get_window_width(), render.get_window_height())
	end
end

function final(self)
	ILLUMINATION:dispose()
end
