
È/Ã/#version 300 es
precision mediump float;

out vec4 _DMENGINE_GENERATED_gl_FragColor_0;
uniform lowp sampler2D DIFFUSE_TEXTURE;
#ifndef float_rgba_utils
#define float_rgba_utils

vec4 float_to_rgba(float v){
    vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * v;
    enc      = fract(enc);
    enc     -= enc.yzww * vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 0.0);
    return enc;
}


highp float rgba_to_float(highp vec4 rgba){
    return dot(rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/16581375.0));
}

#endif
#ifndef shadow_fp
#define shadow_fp

uniform lowp vec4 shadow_params; 
uniform lowp vec4 shadow_color;
uniform highp vec4 sun_position; 
uniform highp sampler2D SHADOW_TEXTURE;

in highp vec4 var_texcoord0_shadow;

vec2 rand(vec2 co){
    return vec2(fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453),
    fract(sin(dot(co.yx, vec2(12.9898, 78.233))) * 43758.5453)) * 0.00047;
}

float shadow_calculation_mobile(highp vec4 depth_data){
    highp vec2 uv = depth_data.xy;
    
    highp vec4 rgba = texture(SHADOW_TEXTURE, uv);
    float depth = rgba_to_float(rgba);
    
    
    
    float shadow = 1.0 - step(depth_data.z-shadow_params.y,depth);

    if (uv.x<0.0 || uv.x>1.0 || uv.y<0.0 || uv.y>1.0) shadow = 0.0;

    return shadow;
}

float shadow_calculation(highp vec4 depth_data){
    float shadow = 0.0;
    float texel_size = 1.0 / shadow_params.x;
    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            highp vec2 uv = depth_data.st + vec2(x,y) * texel_size;
            
            vec4 rgba = texture(SHADOW_TEXTURE, uv);
            float depth = rgba_to_float(rgba);
            
            shadow += depth_data.z - shadow_params.y > depth ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;

    highp vec2 uv = depth_data.xy;
    if (uv.x<0.0) shadow = 0.0;
    if (uv.x>1.0) shadow = 0.0;
    if (uv.y<0.0) shadow = 0.0;
    if (uv.y>1.0) shadow = 0.0;

    return shadow;
}


vec3 direct_light(vec3 light_color, vec3 light_position, vec3 position, vec3 vnormal, vec3 shadow_color){
    vec3 dist = vec3(-5,10,0);
    vec3 direction = normalize(dist);
    float n = max(dot(vnormal, direction), 0.0);
    vec3 diffuse = (light_color - shadow_color) * n;
    return diffuse;
}

#endif
#ifndef light_fp
#define light_fp

#define LIGHT_DATA_PIXELS 6
#define LIGHT_RADIUS_MAX 63.0













uniform highp sampler2D DATA_TEXTURE;

uniform lowp vec4 ambient_color;
uniform lowp vec4 sunlight_color;
uniform lowp vec4 fog_color;
uniform highp vec4 fog;

uniform highp vec4 light_texture_data;
uniform highp vec4 lights_data; 
uniform highp vec4 lights_camera_data; 
uniform highp vec4 clusters_data; 
uniform highp vec4 screen_size;

highp vec4 getData(highp int index) {
    
    int x = index % int(light_texture_data.x);
    int y = index / int(light_texture_data.x);

    
    vec2 normalizedCoords = (vec2(x, y) + 0.5) / light_texture_data.xy;

    
    return texture(DATA_TEXTURE, normalizedCoords);
}

highp float DecodeRGBAToFloatPosition(highp vec4 encoded) {
    encoded.rgb *= 63.0;
    highp float intPart = round(encoded.r) * 64.0 * 64.0 + round(encoded.g) * 64.0 + round(encoded.b);
    highp float fracPart = encoded.a;
    return intPart - 131072.0 + fracPart;
    return fracPart;
}

const float phong_shininess = 16.0;

vec3 point_light2(vec3 light_color, float power, vec3 light_position, vec3 position, vec3 vnormal, float specular, vec3 view_dir)
{

    vec3 dist = light_position - position;
    vec3 direction = vec3(normalize(dist));
    float d = length(dist);

    vec3 reflect_dir = reflect(-direction, vnormal);
    float spec_dot = max(dot(reflect_dir, view_dir), 0.0);

    float irradiance = max(dot(vnormal, direction), 0.05);
    float attenuation = (1.0/(1.0 + d*power + 2.0*d*d*power*power));
    vec3 diffuse = light_color * irradiance * attenuation;

    
    diffuse += irradiance * attenuation * specular * pow(spec_dot, phong_shininess) * light_color; 
    
    return diffuse;
}

vec3 getSpecularColor(vec3 map_specular, float light_specular, vec3 light_color, vec3 light_direction, vec3 surface_normal, vec3 view_direction) {
    if (light_specular == 0.0 || map_specular.x == 0.0) {
        return vec3(0.0);
    }

    float lambertian = max(dot(light_direction, surface_normal), 0.0);

    if (lambertian <= 0.0) {
        return vec3(0.0);
    }

    float surface_shininess = 1.0;

    vec3 reflection_direction = reflect(-light_direction, surface_normal);
    float specular_value = pow(max(dot(view_direction, reflection_direction), 0.0), surface_shininess);

    return light_color * light_specular * specular_value;
}



#endif


in mediump vec2 var_texcoord0;
in highp vec3 var_world_position;
in mediump vec3 var_world_normal;
in highp vec4 var_view_position;
in highp vec3 var_camera_position;

void main() {
    vec4 texture_color = texture(DIFFUSE_TEXTURE, var_texcoord0);
    vec3 color = texture_color.rgb;
    
    
    
    
    

    
    vec3 illuminance_color = vec3(0);
    vec3 specular_color = vec3(0);

    vec3 surface_normal = var_world_normal;
    vec3 view_direction = normalize(var_camera_position - var_world_position);

    
    vec3 ambient = ambient_color.rgb * ambient_color.w;
    illuminance_color = illuminance_color + ambient;


    highp float xStride = screen_size.x/clusters_data.x;
    highp float yStride = screen_size.y/clusters_data.y;
    highp float zStride = (lights_camera_data.y-lights_camera_data.x)/clusters_data.z;


    int clusterX_index = int(floor(gl_FragCoord.x/ xStride));
    int clusterY_index = int(floor(gl_FragCoord.y/ yStride));
    int clusterZ_index = int(floor(-var_view_position.z) / zStride);

    _DMENGINE_GENERATED_gl_FragColor_0 = vec4(float(clusterX_index)/clusters_data.x,float(clusterY_index)/clusters_data.y,float(clusterZ_index)/clusters_data.z, texture_color.a);
}

¿-º-precision mediump float;
uniform lowp sampler2D DIFFUSE_TEXTURE;
#ifndef float_rgba_utils
#define float_rgba_utils

vec4 float_to_rgba(float v){
    vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * v;
    enc      = fract(enc);
    enc     -= enc.yzww * vec4(1.0/255.0, 1.0/255.0, 1.0/255.0, 0.0);
    return enc;
}


highp float rgba_to_float(highp vec4 rgba){
    return dot(rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/16581375.0));
}

#endif
#ifndef shadow_fp
#define shadow_fp

uniform lowp vec4 shadow_params; 
uniform lowp vec4 shadow_color;
uniform highp vec4 sun_position; 
uniform highp sampler2D SHADOW_TEXTURE;

varying highp vec4 var_texcoord0_shadow;

vec2 rand(vec2 co){
    return vec2(fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453),
    fract(sin(dot(co.yx, vec2(12.9898, 78.233))) * 43758.5453)) * 0.00047;
}

float shadow_calculation_mobile(highp vec4 depth_data){
    highp vec2 uv = depth_data.xy;
    
    highp vec4 rgba = texture2D(SHADOW_TEXTURE, uv);
    float depth = rgba_to_float(rgba);
    
    
    
    float shadow = 1.0 - step(depth_data.z-shadow_params.y,depth);

    if (uv.x<0.0 || uv.x>1.0 || uv.y<0.0 || uv.y>1.0) shadow = 0.0;

    return shadow;
}

float shadow_calculation(highp vec4 depth_data){
    float shadow = 0.0;
    float texel_size = 1.0 / shadow_params.x;
    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            highp vec2 uv = depth_data.st + vec2(x,y) * texel_size;
            
            vec4 rgba = texture2D(SHADOW_TEXTURE, uv);
            float depth = rgba_to_float(rgba);
            
            shadow += depth_data.z - shadow_params.y > depth ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;

    highp vec2 uv = depth_data.xy;
    if (uv.x<0.0) shadow = 0.0;
    if (uv.x>1.0) shadow = 0.0;
    if (uv.y<0.0) shadow = 0.0;
    if (uv.y>1.0) shadow = 0.0;

    return shadow;
}


vec3 direct_light(vec3 light_color, vec3 light_position, vec3 position, vec3 vnormal, vec3 shadow_color){
    vec3 dist = vec3(-5,10,0);
    vec3 direction = normalize(dist);
    float n = max(dot(vnormal, direction), 0.0);
    vec3 diffuse = (light_color - shadow_color) * n;
    return diffuse;
}

#endif
#ifndef light_fp
#define light_fp

#define LIGHT_DATA_PIXELS 6
#define LIGHT_RADIUS_MAX 63.0













uniform highp sampler2D DATA_TEXTURE;

uniform lowp vec4 ambient_color;
uniform lowp vec4 sunlight_color;
uniform lowp vec4 fog_color;
uniform highp vec4 fog;

uniform highp vec4 light_texture_data;
uniform highp vec4 lights_data; 
uniform highp vec4 lights_camera_data; 
uniform highp vec4 clusters_data; 
uniform highp vec4 screen_size;

highp vec4 getData(highp int index) {
    
    int x = index % int(light_texture_data.x);
    int y = index / int(light_texture_data.x);

    
    vec2 normalizedCoords = (vec2(x, y) + 0.5) / light_texture_data.xy;

    
    return texture2D(DATA_TEXTURE, normalizedCoords);
}

highp float DecodeRGBAToFloatPosition(highp vec4 encoded) {
    encoded.rgb *= 63.0;
    highp float intPart = round(encoded.r) * 64.0 * 64.0 + round(encoded.g) * 64.0 + round(encoded.b);
    highp float fracPart = encoded.a;
    return intPart - 131072.0 + fracPart;
    return fracPart;
}

const float phong_shininess = 16.0;

vec3 point_light2(vec3 light_color, float power, vec3 light_position, vec3 position, vec3 vnormal, float specular, vec3 view_dir)
{

    vec3 dist = light_position - position;
    vec3 direction = vec3(normalize(dist));
    float d = length(dist);

    vec3 reflect_dir = reflect(-direction, vnormal);
    float spec_dot = max(dot(reflect_dir, view_dir), 0.0);

    float irradiance = max(dot(vnormal, direction), 0.05);
    float attenuation = (1.0/(1.0 + d*power + 2.0*d*d*power*power));
    vec3 diffuse = light_color * irradiance * attenuation;

    
    diffuse += irradiance * attenuation * specular * pow(spec_dot, phong_shininess) * light_color; 
    
    return diffuse;
}

vec3 getSpecularColor(vec3 map_specular, float light_specular, vec3 light_color, vec3 light_direction, vec3 surface_normal, vec3 view_direction) {
    if (light_specular == 0.0 || map_specular.x == 0.0) {
        return vec3(0.0);
    }

    float lambertian = max(dot(light_direction, surface_normal), 0.0);

    if (lambertian <= 0.0) {
        return vec3(0.0);
    }

    float surface_shininess = 1.0;

    vec3 reflection_direction = reflect(-light_direction, surface_normal);
    float specular_value = pow(max(dot(view_direction, reflection_direction), 0.0), surface_shininess);

    return light_color * light_specular * specular_value;
}



#endif


varying mediump vec2 var_texcoord0;
varying highp vec3 var_world_position;
varying mediump vec3 var_world_normal;
varying highp vec4 var_view_position;
varying highp vec3 var_camera_position;

void main() {
    vec4 texture_color = texture2D(DIFFUSE_TEXTURE, var_texcoord0);
    vec3 color = texture_color.rgb;
    
    
    
    
    

    
    vec3 illuminance_color = vec3(0);
    vec3 specular_color = vec3(0);

    vec3 surface_normal = var_world_normal;
    vec3 view_direction = normalize(var_camera_position - var_world_position);

    
    vec3 ambient = ambient_color.rgb * ambient_color.w;
    illuminance_color = illuminance_color + ambient;


    highp float xStride = screen_size.x/clusters_data.x;
    highp float yStride = screen_size.y/clusters_data.y;
    highp float zStride = (lights_camera_data.y-lights_camera_data.x)/clusters_data.z;


    int clusterX_index = int(floor(gl_FragCoord.x/ xStride));
    int clusterY_index = int(floor(gl_FragCoord.y/ yStride));
    int clusterZ_index = int(floor(-var_view_position.z) / zStride);

    gl_FragColor = vec4(float(clusterX_index)/clusters_data.x,float(clusterY_index)/clusters_data.y,float(clusterZ_index)/clusters_data.z, texture_color.a);
}
 